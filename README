			TI J721E/J784S4 EVM Board


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the following layers supplied with Wind River Linux:
	oe-core
	wrlinux
	meta-ti
	meta-edgeai

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.


Building the ti-j72xx/ti-j78xx layer
------------------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.

Note:
To build wrlinux for TI J721E EVM  board, use:

	--machines ti-j72xx

To build wrlinux for TI J784S4 EVM board, use:

	--machines ti-j78xx


License
-------
Copyright (C) 2024 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        Y         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype is available for this BSP/Machine at this time.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP along with
patch descriptions use git-whatchanged on the default kernel. For example:

	%> cd tmp-glibc/work-shared/<bsp_name>/kernel-source
	%> git whatchanged <kernel_version>/standard/base..<kernel_version>/standard/<bsp_name>


4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image.  You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle you will need to run
the saveenv command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyLF0 at 115200 baud. For the DTB
address, 0x88000000 was used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x82000000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate earlycon=ns16550a,mmio32,0x02800000;tftp $loadaddr $bootfile; \ (J721E EVM)
console=$consoledev,$baudrate earlycon=ns16550a,mmio32,0x02880000;tftp $loadaddr $bootfile; \ (J784S4 EVM)
tftp $fdtaddr $fdtfile;booti $loadaddr - $fdtaddr
ethaddr=00:04:9F:02:00:FD
loadaddr=0x82000000
fdtaddr=0x88000000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=eth0
bootfile=Image
fdtfile=k3-j721e-common-proc-board.dtb (J721E EVM)
fdtfile=k3-j784s4-evm.dtb (J784S4 EVM)
rootpath=/tftpboot/rootfs
consoledev=ttyS2
baudrate=115200

5. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator to create the properly partitioned
image on a SD card. It generates partitioned images from existing OpenEmbedded
build artifacts. Please refer to the following URL for more detailed partition
information about WIC:

https://docs.yoctoproject.org/singleindex.html#creating-partitioned-images-using-wic

5.1 Deploy the created WIC image
--------------------------------

Deploy the created WIC image into SD card(/dev/sdx) in your host machine.

   $ sudo dd if=wrlinux-image-<rootfs_type>-<machine>.wic of=/dev/sdx

5.2 Boot the board from the WIC SD card
---------------------------------------

Insert the SD card into the board and select this SD card as the boot device.

You have two ways to start the board:

1. Use the ubootâ€™s default startup environment variables.

2. By set the below uboot environment variables:
For J721E EVM:
   $ setenv bootargs console=ttyS2,115200n8 earlycon=ns16550a,mmio32,0x02800000 root=/dev/mmcblk1p2 rw rootwait ip=dhcp
   $ fatload mmc 1:1 0x82000000 Image; fatload mmc 1:1 0x88000000 k3-j721e-common-proc-board.dtb; booti 0x82000000 - 0x88000000

For J784S4 EVM:
   $ setenv bootargs console=ttyS2,115200n8 earlycon=ns16550a,mmio32,0x02880000 root=/dev/mmcblk1p2 rw rootwait ip=dhcp
   $ fatload mmc 1:1 0x82000000 Image; fatload mmc 1:1 0x88000000 k3-j784s4-evm.dtb; booti 0x82000000 - 0x88000000

Note:
If the IPC feature is enabled, about how to enable IPC please refer to the
section 6.2 for detail, it first needs to run "rproc init;run boot_rprocs_mmc" in u-boot to
load other core's firmware to avoid the kernel using RPMSG to interact with
other cores and get unanswered. Like below:
   $ rproc init;run boot_rprocs_mmc;fatload mmc 1:1 0x82000000 Image; fatload mmc 1:1 0x88000000 <board>.dtb; booti 0x82000000 - 0x88000000

6. Features
===========

Before using the features below, it is recommended that you first add
WRTEMPLATE to your build local.conf to add series tools (Such as: can/audio/ufs).

Simply add line as follows to ${buildprj}/build/conf/local.conf:
	WRTEMPLATE = "feature/bsp-extras"

And it is recommended to refer to the "Foundational Components" of the sdk
release note "Processor SDK Linux for J721e/J784S4" from the TI web.

6.1 CAN
-------

6.1.1 Verify
------------

Detail verification commands as below:

	# ip link set can0 up type can bitrate 125000 dbitrate 5000000 fd on
	# ip link set can1 up type can bitrate 125000 dbitrate 5000000 fd on
	# candump can0 &
	# cansend can1 5A1#11.22.33.44.55.66.77.88
	# ip -d -s link show can0
	# ip -d -s link show can1

If can0 dumps data from can1, CAN feature works fine.

6.2 IPC
-------

The J7 SOC has integrated ARM Cortex A72 and others cores like: Cortex-R5F cores, C71x and C66X DSPs.
Through the CPSW9g virtual MAC, Cortex A72 can communicate with the remote cores using rpmsg.

In order to verify the IPC feature, need to build wrlinux with below steps:

Add line as follows to ${buildprj}/build/conf/local.conf:

	KERNEL_FEATURES:append = " bsp/ti-j7xxx/ti-j7xxx-remoteproc.scc"

Built and install them:

	# bitbake wrlinux-image-xxx

Initialize all the available remote cores in the u-boot:
	$ rproc init;run boot_rprocs_mmc;

Then booting the system, the cores firmwares will be auto-download and get the
response.

By default, the kernel config "CONFIG_SAMPLE_RPMSG_CLIENT" is enabled, the rpmsg
client sample is available to simple test the IPC feature. In the booting stage
it demonstrates how to communicate with an AMP-configured remote processor
over the rpmsg bus.

Note:
Since both the u-boot and linux kernel download the firmwares from the
rootfs directory "/lib/firmware", so NFS is not applicable to this case.
Only WIC mode works fine.

6.3 Watchdog (J721E EVM)
------------------------

In order to use watchdog, the configuration switch on J721EX-PM2-SOM board should be set with:

SW2.1=OFF, SW2.2=ON, SW3.1=ON, SW3.2=OFF

6.3.1 Usage and verification
----------------------------

        # echo 1 > /dev/watchdog

6.4 UFS (J721E EVM)
-------------------

6.4.1 Usage and verification
----------------------------

Running the commands in u-boot to scan the Universal Flash Subsystem (UFS)
devices.
	=> ufs init
	=> scsi scan

If no relevant device was found, please refer to the following link for more
information:
	https://e2e.ti.com/support/processors/f/791/t/922975

6.5 Graphics
------------

J721E/J784S4 device is enabled with 3D graphics accelerator based on the Rogue 8XE/MG BXS-64-4 series
from Imagination Technologies Inc. 3D-graphics apps call userspace libraries to drive
the GPU directly by the graphics driver.

Due to the software license terms, we are not permitted to redistribute these components.
Due to this, we are unable to support the components (ti-img-rogue-driver, and
ti-img-rogue-umlibs) or directly enable them (ti-img-rogue-driver, and
ti-img-rogue-umlibs) within Wind River Linux. Please contact your silicon vendor if you have
any questions about the software license terms.

As below is the step how to build a graphics enabled system and verify the graphics feature:

6.5.1 Build Image
-----------------

  1) set BB_NO_NETWORK as '0' in <path-of-project>/build/conf/local.conf file.

  2) Launch bitbake to build an image with graphics support

     $ cd path_to_your_project
     $ . ./environment-setup-x86_64-wrlinuxsdk-linux
     $ . ./oe-init-build-env
     $ cat << _EOF >> conf/local.conf
DISTRO ?= "wrlinux-graphics"
MACHINE_FEATURES += " gpu"
CUSTOMER_RECIPES:meta-ti-bsp += 'ti-img-rogue-umlibs ti-img-rogue-driver mesa-pvr devil weston weston-init wayland-protocols wayland'
_EOF
     $ bitbake wrlinux-image-std-sato

6.6 Video
---------

J721E has the following hardware accelerators:
Multi-Standard HD Video Decoder (DECODER) based on D5520MP2 from Imagination
Technologies for accelerating multimedia decode.
Multi-Standard HD Video Encoder (ENCODER) based on VXE384MP2 from Imagination
Technologies for accelerating multimedia encode.

The Encoder/Decoder (VENC/VDEC) is found on the J784S4 SoC. Combined H.264 and H.265
encoder/decoder used in the Texas Instruments J784S4 SoC.

The Linux Kernel Drivers has integrated the Video Decoder and Encoder as module by default.
Because of the license issue, you can manually build the Image as below to
integrate the gstreamer related packages:

6.6.1 Build Image
-----------------

  1) set BB_NO_NETWORK as '0' in ${buildprj}/build/conf/local.conf file.

  2) Add line as follows to ${buildprj}/build/conf/local.conf:
     $ cat << _EOF >> conf/local.conf
CUSTOMER_RECIPES:openembedded-layer += 'faad2'
LICENSE_FLAGS_ACCEPTED += "commercial"
IMAGE_INSTALL:append:ti-j7 = ' gstreamer1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-libav'
_EOF

  3) bitbake wrlinux-image-xxx

6.6.2 Verify Multimedia feature
-------------------------------

An example to test with GStreamer Pipelines on target board:
J721E EVM:
	$ gst-launch-1.0 filesrc location=/<path_to_file>  ! qtdemux ! h264parse ! v4l2h264dec ! videoconvert ! v4l2h264enc ! filesink location=/<path_to_file>

J784S4 EVM:
	$ gst-launch-1.0 filesrc location=/<path_to_file> ! rawvideoparse ! v4l2h264enc ! filesink location=/<path_to_file> sync=true

6.7 Build U-Boot
----------------

By default, the u-boot image is compiled and installed. If you want u-boot to be manually
compiled separately, use the following commandï¼š

	# bitbake u-boot-ti-staging

6.8 OSPI Flash (J784S4 EVM)
---------------------------

In order to use OSPI Flash, the configuration switch on J784s4 EVM board should be set with:

SW2.1=OFF

6.9 USB
-------

6.9.1 USB2.0 & USB3.1 multiplex (J784S4 EVM)
--------------------------------------------

The J784S4-EVB supports a single USB interface. Therefore, the user must configure
for either the USB3.1 Type C interface [J4] or the USB2.0 Type A interface [J5]. Both can not
be operated simultaneously. The default system is the USB3.1 Type C interface, in order to
switch to the USB2.0 Type A interface, using the command on WRLinux shell:
	$ gpioset -c1 -t0 --hold-period 20ms 12=1

Otherwise switch to the USB3.1 Type C interface, using the command on WRLinux shell:
	$ gpioset -c1 -t0 --hold-period 20ms 12=0

Note: same as TI SDK, the bottom port of the two USB2.0 ports can not recognize
U disk, the top port of the two USB2.0 ports works fine.

6.9.2 USB3.1 Mode Switch
------------------------

For J784S4 EVM:
    SW2.[4:3] = 00   DFP(Downstream Facing Port)
    SW2.[4:3] = 01   DRP(Dual Role Port)
    SW2.[4:3] = 1X   UFP(Upstream Facing Port)
For J721E EVM:
    SW3.[4:3] = 00   DFP(Downstream Facing Port)
    SW3.[4:3] = 10   DRP(Dual Role Port)
    SW3.[4:3] = X1   UFP(Upstream Facing Port)

6.10 Vision Apps
----------------

Vision Apps is a component within Processor SDK RTOS.

Vision Apps integrates different components within Processor SDK RTOS (PSDK RTOS)
like SysBIOS, PDK, OpenVX, Algorithms to realize system applications for vision
processing like surround view.

Vision Apps can be built or directly picked as out of the Box Demos from TI,
prebuilt PSDK RTOS and Demo Data can be obtained though TI's technical support.
It is recommended that you first refer to this guide document "out_of_box_j784s4.html" or
"out_of_box_j721e.html", while using the vision apps.

In order to run vision apps with full features on WRLinux, WRLinux should be built with:
	1. Modify the ${buildprj}/build/conf/local.conf to add:

	   $ cat << _EOF >> conf/local.conf
WRTEMPLATE = "feature/bsp-extras"
KERNEL_FEATURES:append = " bsp/ti-j7xxx/ti-j7xxx-remoteproc.scc"
_EOF
	2. Enable Graphics feature, please refer to "6.5.1 Build Image"
	3. Add vision-apps & tidl & tiovx related packages, it needs to enable the previous
	   graphic feature first. Add line as follows to ${buildprj}/build/conf/local.conf:

	   $ cat << _EOF >> conf/local.conf
CUSTOMER_RECIPES:meta-python += 'python3-yamlloader'
CUSTOMER_RECIPES:openembedded-layer += 'glm'
DISTROOVERRIDES:append = ":adas"
CUSTOMER_RECIPES:meta-edgeai +=  'ti-vision-apps ti-tidl edgeai-apps-utils edgeai-tiovx-kernels edgeai-tiovx-modules ti-edgeai-firmware edgeai-tiovx-apps'
IMAGE_INSTALL:append:ti-j7 = ' ti-vision-apps-dev ti-tidl-dev edgeai-apps-utils-source edgeai-tiovx-kernels-dev edgeai-tiovx-kernels-source edgeai-tiovx-modules-dev edgeai-tiovx-modules-source ti-edgeai-firmware edgeai-tiovx-apps-dev edgeai-tiovx-apps-source'
_EOF

Run vision apps on EVM target in WRLinux + RTOS mode (via SD card boot) with below
steps:

6.10.1 Usage and verification
-----------------------------

Step 1: Download Prebuilt PSDK RTOS

	$ cd {path/to/file}
	$ tar xf ti-processor-sdk-rtos-j784s4-evm-<version>-prebuilt.tar.gz (J784S4 EVM)
	$ tar xf ti-processor-sdk-rtos-j721e-evm-<version>-prebuilt.tar.gz (J721E EVM)

Step 2: Download Demo Data Sets
	psdk_rtos_ti_data_set_xx_xx_xx.tar.gz
	psdk_rtos_ti_data_set_xx_xx_xx_j784s4.tar.gz (J784S4 EVM)
	psdk_rtos_ti_data_set_xx_xx_xx_j721e.tar.gz (J721E EVM)

Step 3: Prepare SD card
	$ sudo ./mk-linux-card.sh /dev/sdx

Note: make sure to give the correct device name to the following script, example
/dev/sda is typically local hard disk.

Step 4: Copy WRLinux Filesystem and Modify script
For J721E EVM:
	$ cp path_to_your_project/build/tmp-glibc/deploy/images/ti-j72xx/wrlinux-image-<rootfs_type>-ti-j72xx.tar.bz2 .
	$ sed -i "s/tisdk-adas-image-j721e-evm.tar.xz/wrlinux-image-std-sato-ti-j72xx.rootfs.tar.bz2/;40s/-xf/-jxf/" install_to_sd_card.sh
For J784S4 EVM:
	$ cp path_to_your_project/build/tmp-glibc/deploy/images/ti-j78xx/wrlinux-image-<rootfs_type>-ti-j78xx.tar.bz2 .
	$ sed -i 's/tisdk-adas-image-j784s4-evm.tar.xz/wrlinux-image-std-sato-ti-j78xx.rootfs.tar.bz2/;40s/-xf/-jxf/' install_to_sd_card.sh

Step 5: Install Filesystem and Boot Files
	$ ./install_to_sd_card.sh
	$ ./install_data_set_to_sd_card.sh <path/to/psdk_rtos_ti_data_set_xx_xx_xx.tar.gz>
	$ ./install_data_set_to_sd_card.sh <path/to/psdk_rtos_ti_data_set_xx_xx_xx_<machine>.tar.gz>

Step 6: Run on EVM
 Run series demos:
	$ cd /opt/vision_apps
	$ source ./vision_apps_init.sh
	$ ./run_app_tidl_avp.sh                 - Auto valet parking demo (needs display)

Note: more testing demos, you can refer to the guide document "out_of_box_j784s4.html" or
"out_of_box_j721e.html" in the TI web site.

6.10.2 CPSW9G Virtual Client
----------------------------

The vision app prebuilt PSDK RTOS provides the Eth-Switch Firmware running on the R5F core
can controls access to the CPSWng subsystem. The other cores have thin client drivers running
on them to receive data from the EthSwitch firmware. On the A core running Linux, the cpsw-proxy-client
driver is responsible for the interaction with the EthSwitch firmware.

Detail information can refer to "3.2.2.10.3.2.3.1. CPSW Proxy Client" of the SDK document.
The created proxy client port as below:

	root@ti-j7:/# ethtool -i enx701d01a6a6eb
	driver: ti_cpsw_proxy_client
	version: 6.6.43-yocto-standard
	firmware-version:
	expansion-rom-version:
	bus-info: virtio3.ti.ethfw.ethdevice.-1.1
	supports-statistics: no
	supports-test: no
	supports-eeprom-access: no
	supports-register-dump: no
	supports-priv-flags: no

6.11 TSN
--------

TI Common Platform Ethernet Switch (CPSW) supports TSN features such as:
	1.PTP (Precision Time Protocol) [IEEE-1588, IEEE-802.1AS]
	2.EST (Enhancements for Scheduled Traffic) [IEEE-802.1Qbv]
	3.FQTSS/CBS (Credit Based Shaper) [IEEE-802.1Qav]
	4.IET (Interspersing Express Traffic) [IEEE-802.3br, IEEE-802.1Qbu]

To get more details about TSN feature, please refer to instructions mentioned in the sections
"3.2.2.10.3.3. TSN with CPSW" in the web link user manual of PROCESSOR-SDK-LINUX-J721E or PROCESSOR-SDK-LINUX-J784S4.

The following will provide a simple test demo for each TSN feature. Their test environment is
to directly connect one J721E EVM board eth0 port as master to another J784S4 EVM board eth0 port as the slave.

Note: the below 'eth0' should be replaed with your own Ethernet port name.

6.11.1 PTP
----------

In both two EVM boards, create a config file named ptp.cfg whose contents are as follows:
[global]
tx_timestamp_timeout 400

1. Run the following on master target:
	# ptp4l -E -2 -H -i eth0 -l 6 -m -q -f ptp.cfg

2. Run the following on slave target:
	# ptp4l -E -2 -H -i eth0 -s -l 6 -m -q -f ptp.cfg

6.11.2 EST
----------

1. Run the following on slave target:
	# while sleep 1; do plget -m rx-lat -f ipgap -n 128 -i eth0 -t ptpl2 -f hwts; done

2. Create the below script and run on master target:
#!/bin/sh

ifconfig eth0 down
ethtool -L eth0 tx 3
ethtool --set-priv-flags eth0 p0-rx-ptype-rrobin off
ifconfig eth0 up
sleep 30

#sync system time to CPSW CPTS
phc2sys -s CLOCK_REALTIME -c eth0 -m -O 0 > /dev/null &

#calc base_time as now + 2min, give it time to sync
base=$(((`date +%s` + 2 * 60)*1000000000))

tc qdisc replace dev eth0 parent root handle 100 taprio \
    num_tc 3 \
    map 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 \
    queues 1@0 1@1 1@2 \
    base-time $base \
    sched-entry S 4 125000 \
    sched-entry S 2 125000 \
    sched-entry S 1 250000 \
    flags 2

tc qdisc add dev eth0 clsact
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5001 0xffff action skbedit priority 3
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5002 0xffff action skbedit priority 2
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5003 0xffff action skbedit priority 1
tc qdisc show dev eth0

# Wait for 2 minutes for sync to complete
sleep 120

# NOTE: Replace 1c:63:49:17:24:ae with the MAC address of eth0 of slave board
plget -i eth0 -m pkt-gen -p 3 -t ptpl2 -n 128 -a 1c:63:49:17:24:ae -l 1500
sleep 5
plget -i eth0 -m pkt-gen -p 2 -t ptpl2 -n 128 -a 1c:63:49:17:24:ae -l 1500
sleep 5
plget -i eth0 -m pkt-gen -p 1 -t ptpl2 -n 128 -a 1c:63:49:17:24:ae -l 1500

6.11.3 CBS
----------

1. Create the below script and run on master target:
#!/bin/sh

ifconfig eth0 down
ethtool -L eth0  tx 8
ifconfig eth0 up
ifconfig eth0 192.168.1.1

sleep 10

tc qdisc replace dev eth0 handle 100: parent root mqprio num_tc 3 \
map 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 queues 1@0 1@6 1@7 hw 0

echo 106 > /sys/class/net/eth0/queues/tx-7/tx_maxrate
echo 212 > /sys/class/net/eth0/queues/tx-6/tx_maxrate

tc qdisc add dev eth0 clsact
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5001 0xffff action skbedit priority 7
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5002 0xffff action skbedit priority 6

iperf3 -c 192.168.1.2 -t10 -p5001 -Tpri7 & \
iperf3 -c 192.168.1.2 -t10 -p5002 -Tpri6 & \
iperf3 -c 192.168.1.2 -t10 -p5003 -Tpri0

2. Create the below script and run on slave target:
ifconfig eth0 192.168.1.2
iperf3 -s -p 5001&
iperf3 -s -p 5002&
iperf3 -s -p 5003&

6.11.4 IET
----------

1. Create the below script and run on master target:
#!/bin/sh

ifconfig eth0 down
ethtool -L eth0 tx 2
ethtool -L eth0 tx 4
ethtool --set-priv-flags eth0 p0-rx-ptype-rrobin off
ethtool --set-mm eth0 pmac-enabled on tx-enabled on verify-enabled on verify-time 10 tx-min-frag-size 124
ifconfig eth0 up
sleep 5

iperf3 -s -i30 -p5002&
iperf3 -s -i30 -p5003&
ifconfig eth0 192.168.100.30

2. Create the below script and run on slave target:
#!/bin/sh

ifconfig eth0 down
ethtool -L eth0 tx 4
ethtool --set-priv-flags eth0 p0-rx-ptype-rrobin off
ethtool --set-mm eth0 pmac-enabled on tx-enabled on verify-enabled on verify-time 10 tx-min-frag-size 124
ifconfig eth0 up
sleep 5

tc qdisc replace dev eth0 handle 100: parent root mqprio \
    num_tc 4 \
    map 0 1 2 3 \
    queues 1@0 1@1 1@2 1@3 \
    hw 1 \
    mode dcb \
    fp P P P E

tc -g class show dev eth0
tc qdisc add dev eth0 clsact
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5002 0xffff action skbedit priority 2
tc filter add dev eth0 egress protocol ip prio 1 u32 match ip dport 5003 0xffff action skbedit priority 3
ip addr add 192.168.100.20/24 dev eth0
sleep 2
iperf3 -c 192.168.100.30 -u -b200M -l1472 -u -t30 -i30 -p5002&
iperf3 -c 192.168.100.30 -u -b50M -l1472 -u -t30 -i30 -p5003&
